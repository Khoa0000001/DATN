import axios from "axios";

const apiKey = import.meta.env.VITE_MISTRAL_API_KEY || "";
const apiUrl =
  import.meta.env.VITE_MISTRAL_API_URL ||
  "https://api.mistral.ai/v1/chat/completions";

const allParts = [
  { id: 1, title: "CPU" },
  { id: 2, title: "Mainboard" },
  { id: 3, title: "Card m√†n h√¨nh" },
  { id: 4, title: "RAM" },
  { id: 5, title: "·ªî c·ª©ng SSD" },
  { id: 6, title: "·ªî c·ª©ng HDD" },
  { id: 7, title: "Case m√°y t√≠nh" },
  { id: 8, title: "Ngu·ªìn m√°y t√≠nh" },
  { id: 9, title: "T·∫£n nhi·ªát CPU" },
  { id: 10, title: "M√†n h√¨nh" },
  { id: 11, title: "Chu·ªôt" },
  { id: 12, title: "B√†n ph√≠m" },
  { id: 13, title: "Tai nghe gaming" },
  { id: 14, title: "Ph·∫ßn m·ªÅm" },
];

const extractJsonFromText = (text: string): string => {
  const match = text.match(/\[([\s\S]*?)\]/);
  return match ? match[0] : "";
};

export const getBuildPCResponse = async (
  budget: number,
  usage: string,
  existingParts: { [key: string]: boolean }
) => {
  const missingParts = allParts.filter((part) => !existingParts[part.title]);

  const prompt = `
B·∫°n l√† m·ªôt chuy√™n gia l·∫Øp r√°p m√°y t√≠nh.  
H√£y t∆∞ v·∫•n c·∫•u h√¨nh PC v·ªõi ng√¢n s√°ch **${budget} VND**, ph·ª•c v·ª• cho **${usage}**.  

üõ† **Linh ki·ªán ƒë√£ c√≥**: ${Object.keys(existingParts)
    .map((item) => `"${item}"`)
    .join(", ")}  
‚õî **Kh√¥ng c·∫ßn mua l·∫°i nh·ªØng linh ki·ªán n√†y!**  

üìã **Danh s√°ch linh ki·ªán c·∫ßn mua (JSON format, kh√¥ng bao g·ªìm linh ki·ªán ƒë√£ c√≥)**:  

[
  ${missingParts
    .map(
      (part) => `{
    "id": ${part.id},
    "title": "${part.title}",
    "value": { "name": "T√™n ${part.title} ph√π h·ª£p", "price": "Gi√° ph√π h·ª£p VND v√† l√† s·ªë nguy√™n" }
  }`
    )
    .join(",\n  ")}
]

Ch·ªâ tr·∫£ v·ªÅ JSON ƒë√∫ng ƒë·ªãnh d·∫°ng, kh√¥ng gi·∫£i th√≠ch, kh√¥ng b√¨nh lu·∫≠n th√™m.
`.trim();

  try {
    const response = await axios.post(
      apiUrl,
      {
        model: "mistral-tiny",
        messages: [
          { role: "system", content: "B·∫°n l√† m·ªôt chuy√™n gia m√°y t√≠nh." },
          { role: "user", content: prompt },
        ],
        max_tokens: 1500,
      },
      {
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${apiKey}`,
        },
      }
    );

    let rawText = response.data.choices[0].message.content.trim();
    let jsonText = extractJsonFromText(rawText);

    if (!jsonText) {
      throw new Error("Kh√¥ng t√¨m th·∫•y JSON h·ª£p l·ªá trong ph·∫£n h·ªìi c·ªßa Mistral.");
    }

    return JSON.parse(jsonText);
  } catch (error: any) {
    console.error("API Error:", error.response?.data || error.message);
    throw new Error(
      `Error: ${error.response?.data?.error?.message || error.message}`
    );
  }
};
