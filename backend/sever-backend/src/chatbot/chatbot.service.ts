// src/chatbot/chatbot.service.ts
import { Injectable } from '@nestjs/common';
import { GeminiService } from 'src/gemini/gemini.service';
import { PrismaService } from 'src/prisma/prisma.service';
import { Prisma } from '@prisma/client';
import { EmbeddingService } from '@/embedding/embedding.service';
import cosineSimilarity from '@/utils/cosineSimilarity';

@Injectable()
export class ChatbotService {
  constructor(
    private readonly _prisma: PrismaService,
    private readonly _geminiService: GeminiService,
    private readonly _embeddingService: EmbeddingService,
  ) {}

  async getTop8SimilarProducts(questionEmbedding: number[]) {
    const products = await this._prisma.products.findMany({
      where: {
        embedding: { not: Prisma.JsonNullValueFilter.JsonNull },
        isDeleted: false,
      },
      select: {
        id: true,
        nameProduct: true,
        description: true,
        price: true,
        category: {
          select: { nameCategory: true },
        },
        embedding: true,
      },
    });

    const scored = products
      .map((product) => ({
        ...product,
        score: cosineSimilarity(
          questionEmbedding,
          product.embedding as number[],
        ),
      }))
      .sort((a, b) => (b.score ?? 0) - (a.score ?? 0))
      .slice(0, 8);

    return scored;
  }

  async ask(question: string, userId?: string): Promise<string> {
    const vectorQuestion = await this._embeddingService.getEmbedding(question);
    const similarProducts = await this.getTop8SimilarProducts(vectorQuestion);
    let recentHistory: {
      id: string;
      createDate: Date;
      updateDate: Date;
      question: string;
      answer: string;
      userId: string | null;
    }[] = [];
    // L·∫•y l·ªãch s·ª≠ tr√≤ chuy·ªán g·∫ßn ƒë√¢y (gi·ªõi h·∫°n 5 tin cu·ªëi)
    if (userId)
      recentHistory = await this._prisma.chatHistory.findMany({
        where: {
          userId: userId,
        },
        orderBy: { createDate: 'desc' },
        take: 10,
      });

    const historyContext = recentHistory
      .reverse() // ƒë·∫£o ng∆∞·ª£c ƒë·ªÉ hi·ªÉn th·ªã t·ª´ c≈© ƒë·∫øn m·ªõi
      .map((item) => `Ng∆∞·ªùi d√πng: ${item.question}\nAI: ${item.answer}`)
      .join('\n\n');

    const internalInfo = similarProducts
      .map((p, i) => {
        return `S·∫£n ph·∫©m ${i + 1}:
  - T√™n: ${p.nameProduct}
  - M√¥ t·∫£: ${p.description || 'Kh√¥ng c√≥ m√¥ t·∫£'}
  - Gi√°: ${p.price} VND
  - Lo·∫°i: ${p.category?.nameCategory || 'Kh√¥ng x√°c ƒë·ªãnh'}
  - Link: ${process.env.FRONTEND_URL}/products/${p.id}`;
      })
      .join('\n\n');

    const prompt = `
  B·∫°n l√† tr·ª£ l√Ω AI b√°n h√†ng th√¢n thi·ªán. D∆∞·ªõi ƒë√¢y l√† l·ªãch s·ª≠ cu·ªôc tr√≤ chuy·ªán v√† th√¥ng tin s·∫£n ph·∫©m li√™n quan:
  
  L·ªãch s·ª≠ tr√≤ chuy·ªán g·∫ßn ƒë√¢y:
  ${historyContext || 'Ch∆∞a c√≥ l·ªãch s·ª≠ tr√≤ chuy·ªán.'}
  
  S·∫£n ph·∫©m li√™n quan:
  ${internalInfo}
  
  Ng∆∞·ªùi d√πng v·ª´a h·ªèi:
  "${question}"
  
  üëâ H√£y ph·∫£n h·ªìi nh∆∞ m·ªôt nh√¢n vi√™n t∆∞ v·∫•n b√°n h√†ng chuy√™n nghi·ªáp, g·ª£i √Ω s·∫£n ph·∫©m ph√π h·ª£p ho·∫∑c tr·∫£ l·ªùi c√¢u h·ªèi, gi·ªØ phong c√°ch th√¢n thi·ªán, t·ª± nhi√™n.
    `;

    const answer = await this._geminiService.generate(prompt);

    // L∆∞u l·ªãch s·ª≠ tr√≤ chuy·ªán
    await this._prisma.chatHistory.create({
      data: {
        question,
        answer,
        userId: userId || null,
      },
    });

    return answer;
  }
}
